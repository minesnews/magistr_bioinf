1. Алгоритм — это чётко определённая последовательность действий или инструкций, предназначенная для решения определённой задачи или класса задач.

Алгоритм нахождения среднего значения:

1. Определить набор чисел
2. Вычислить сумму всех чисел в наборе
3. Подсчитать количество чисел в наборе
4. Разделить сумму на количество чисел



2. В языке Python есть несколько основных типов данных, которые относятся к разным группам: числовым, строковым, последовательностям и словарям. Python — язык с динамической типизацией, что означает, что тип переменной определяется во время выполнения программы, а не на этапе её написания или компиляции.

Числовые
    • int — целые числа (положительные или отрицательные, включая нуль). Используются для представления дискретных значений, таких как количество элементов в списке или индекс массива.
    • float — числа с плавающей точкой (дробная часть, разделённая десятичной точкой). Применяются для представления значений, которые требуют высокой точности, например, измерений в физике или финансовых расчётов.
    • complex — комплексные числа (имеют реальную и мнимую части). В Python записываются в виде a + bj, где a — действительная часть, а b — мнимая, обозначенная с помощью буквы j (вместо привычной математической i).
Строковые
    • str — строковый тип данных для хранения текстовой информации. Строка может содержать буквы, цифры, пробелы, символы и даже эмодзи. dzen.rubase-python.readthedocs.io
    • Особенности:  
        ◦ Неизменяемый тип — после создания строку нельзя изменить напрямую, любые операции над ней создают новую строку. dzen.ru
        ◦ Поддерживает индексацию и срезы, что позволяет извлекать отдельные символы или подстроки. 
Последовательности
    • Список (list) — упорядоченная изменяемая последовательность элементов. Определяется с использованием квадратных скобок, элементы разделяются запятыми.
    • Кортеж (tuple) — упорядоченная неизменяемая коллекция элементов. Определяется с использованием круглых скобок (), элементы кортежа разделяются запятыми.
    • Множество (set) — неупорядоченная коллекция уникальных элементов. Определяется с использованием фигурных скобок {} (только не пустое), элементы множества разделяются запятыми.
Словари
    • Словарь (dict) — изменяемая коллекция, в которой данные хранятся в виде пар «ключ-значение». В отличие от списков, доступ к элементам осуществляется не по индексу, а по ключу.
    • Особенности:
        ◦ В качестве ключей могут использоваться только хешируемые объекты: строки (str), числа (int, float), кортежи (tuple), если они состоят только из неизменяемых объектов.
        ◦ Значения, в отличие от ключей, могут быть любыми: числа, строки, списки, множества и даже другие словари, функции, объекты классов и любые другие структуры.
3.

	База данных — это набор упорядоченных и структурированных данных, которые хранятся на определённом компьютере. Проще всего представить её как большую Excel-таблицу, где у каждого элемента (строки) есть определённые свойства (столбцы). skillbox.ru
	Система управления базами данных (СУБД) — это набор инструментов, которые позволяют удобно управлять базами данных: удалять, добавлять, фильтровать и находить элементы, менять их структуру и создавать резервные копии. skillbox.ru
Если провести аналогию, база данных — это библиотека с книгами, а СУБД — библиотекарь, который помогает найти нужную книгу и поддерживает порядок на полках. yandex.cloud
	Основные функции СУБД: создание баз данных, изменение, удаление и объединение их по определённым признакам; хранение данных в структурированном виде и нужном формате; защита данных от взлома и нежелательных изменений; выгрузка и сортировка данных по заданным фильтрам; поддержка целостности баз данных, резервное копирование и восстановление после сбоёв.
	Назначение первичного ключа в таблице реляционной базы данных — идентификация записей. Он обеспечивает уникальность каждой строки, не позволяя иметь несколько записей с одинаковыми значениями. 

	Реляционная и нереляционная базы данных (NoSQL) отличаются структурой данных, языком запросов, масштабируемостью и производительностью. 

	Реляционные базы данных хранят структурированные данные в таблицах с предопределёнными связями. Каждая таблица состоит из строк и столбцов, где строки представляют записи, а столбцы — параметры, описывающие каждую запись. appmaster.ioSkyeng.ruskillbox.ru
    • Нереляционные базы данных не ограничиваются табличной структурой и позволяют хранить данные в разнообразных форматах, таких как документы, графы или «ключ-значение». Структура данных в таких базах динамическая и может меняться в любой момент времени.




4.
Оперативная (ОЗУ) и постоянная (ПЗУ) память компьютера отличаются назначением и свойствами. Эти типы памяти выполняют различные функции, и их характеристики отличаются. guru99.comstruchkov.devdigitalocean.ru
Оперативная память (ОЗУ)
Назначение: временное хранилище данных, которое обеспечивает быстрый доступ к информации для процессора. В ОЗУ хранятся данные, которые процессору могут понадобиться в ближайшее время: программный код, данные приложений, информация о состоянии системы и другое. hi-tech.mail.rudigitalocean.rustruchkov.dev
Особенности:
    • Энергозависима: при выключении устройства все данные из ОЗУ стираются. hi-tech.mail.ruskillbox.ru
    • Доступ к данным: центральный процессор может считывать, записывать или изменять данные в оперативной памяти. tutorialspoint.com
    • Объём: определяет, сколько данных может хранить ОЗУ одновременно. hi-tech.mail.ru
    • Тактовая частота: измеряется в МГц, чем выше частота, тем быстрее передаются данные. hi-tech.mail.ru
Постоянная память (ПЗУ)
Назначение: постоянное хранилище данных, которые должны надёжно сохраняться даже при отключении питания устройства. В ПЗУ обычно хранится микропрограмма или загрузчик, необходимый для начальной загрузки системы и выполнения основных операций. digitalocean.ru
Особенности:
    • Энергонезависима: сохраняет данные даже при выключении питания.
    • Доступ к данным: в основном только для чтения, традиционно данные записываются в процессе производства и не могут быть изменены впоследствии (хотя некоторые современные типы, например EEPROM, могут быть перезаписаны).
    • Объём: меньше по объёму, так как содержит только основные программы и данные, необходимые для работы системы.

5. Операционная система — это программное обеспечение, которое управляет ресурсами компьютера и обеспечивает взаимодействие между пользователями и аппаратным обеспечением. Skyeng.ru
Три примера операционных систем:
    1. Windows. Платформа, разработанная корпорацией Microsoft, которая широко применяется на персональных компьютерах различных производителей.
    2. macOS. Операционная система, созданная компанией Apple, которая является неотъемлемой частью всех устройств этого производителя.
    3. Linux. Семейство свободных операционных систем, основанных на ядре Linux, и популярна среди пользователей, предпочитающих открытое программное обеспечение.
 Skyeng.ruTrends.RBC.ru
Основные функции операционных систем:
    • Управление памятью. Операционная система распределяет ресурсы оперативной и постоянной памяти ПК и высвобождает её для различных процессов.
    • Управление процессором. ОС распределяет вычислительные задачи между ядрами процессора, гарантируя, что каждое из них загружается равномерно.
    • Установка и обновление приложений и программ. ОС предоставляет инструменты для безопасной и удобной установки программного обеспечения, а также контролирует процесс обновления.
    • Распределение потоков процессов и поддержка многозадачности. Система эффективно управляет потоками выполнения задач, что позволяет одновременно запускать несколько приложений или процессов.


6.
Компьютерная сеть — это комплекс аппаратных и программных средств, предназначенных для обмена информацией и доступа пользователей к единым ресурсам сети. Основное назначение — обеспечить совместный доступ к информации (базам данных, документам и т. д.) и ресурсам (жёсткие диски, принтеры и т. д.). slutskmedkol.by
По территориальному признаку сети делят на локальные (LAN, Local Area Network) и глобальные (WAN, Wide Area Network). 

Локальная сеть (LAN)
Объединяет устройства внутри ограниченного пространства — дома, офиса или учебного заведения. Цель — обеспечить обмен данными и ресурсами между устройствами внутри сети. digitalocean.ruSkyeng.ru
Характеристики:
    • Устройства соединены между собой с помощью сетевых кабелей или беспроводных технологий (Wi-Fi).
    • Топология может быть различной: звезда, кольцо, шина или смешанная.
    • Для обмена данными используются различные сетевые протоколы, например TCP/IP.
 digitalocean.ru
Сферы применения:
    • Бизнес и предприятия — локальные сети позволяют сотрудникам обмениваться информацией, работать в коллективе над проектами, использовать общие ресурсы.
    • Образование — школы, колледжи и университеты используют локальные сети для связи между компьютерами в классах, досФункция в программировании — это именованный блок кода, который выполняет одну конкретную задачу. Обычно функции выглядят как маленькие программы внутри основного кода, и их можно запускать в разные моменты времени. studwork.rublog.skillfactory.ru
Цель использования функций при написании программ — упорядочить и упростить процесс разработки. Они позволяют разделить большой код на маленькие фрагменты — каждый отвечает за конкретное действие. studwork.ru
Некоторые преимущества использования функций:
    • Повторное использование кода. Вместо того чтобы копировать одни и те же строки много раз, можно написать функцию и вызывать её когда нужно.
    • Упрощение программы. Код разбивается на логические части, его легче читать и поддерживать.
    • Изоляция задач. Если в функции ошибка, её проще найти и исправить, не затрагивая весь код.
    • тупа к онлайн-ресурсам и обмена информацией между преподавателями и студентами.

Глобальная сеть (WAN)
Объединяет устройства на больших географических расстояниях — например, между городами или странами. Основная задача WAN — обеспечить стабильную и защищённую передачу данных между удалёнными узлами. ru.vstack.comabimedia.ru
Характеристики:
    • Использует каналы связи различного типа: оптоволоконные линии, спутниковые каналы, магистральные сети провайдеров, мобильные каналы.
    • В структуру WAN входят маршрутизаторы, коммутаторы, шлюзы и межсетевые экраны.
 ru.vstack.com
Сферы применения:
    • Корпоративная сеть — WAN связывает офисы в разных городах через VPN или MPLS.
    • Облачные сервисы — обеспечивает доступ к удалённым серверам с минимальными задержками.
    • Интернет-провайдинг — использует магистральные каналы для передачи данных между регионами.
 abimedia.ru
Отличия от LAN:
    • LAN работает в ограниченной зоне с высокой скоростью (до 10 Гбит/с), а WAN охватывает большие расстояния, но с меньшей скоростью (от 1 Мбит/с до 100 Гбит/с).
    • В LAN управление обычно централизованное, а в WAN — распределённое между провайдерами и маршрутизаторами.


7. Функция в программировании — это именованный блок кода, который выполняет одну конкретную задачу. Обычно функции выглядят как маленькие программы внутри основного кода, и их можно запускать в разные моменты времени. studwork.rublog.skillfactory.ru
Цель использования функций при написании программ — упорядочить и упростить процесс разработки. Они позволяют разделить большой код на маленькие фрагменты — каждый отвечает за конкретное действие. studwork.ru
Некоторые преимущества использования функций:
    • Повторное использование кода. Вместо того чтобы копировать одни и те же строки много раз, можно написать функцию и вызывать её когда нужно.
    • Упрощение программы. Код разбивается на логические части, его легче читать и поддерживать.
    • Изоляция задач. Если в функции ошибка, её проще найти и исправить, не затрагивая весь код.

Git — это система контроля версий, которая помогает отслеживать историю изменений в файлах. Её используют программисты для совместной работы над проектами. blog.skillfactory.ru
Некоторые задачи, для решения которых применяется Git:
    • Возврат к предыдущей версии кода. Это нужно, если решаемая задача больше не актуальна или требуется внести исправления в более раннюю версию программы. blog.skillfactory.ru
    • Параллельная работа над проектом. Несколько программистов одновременно вносят изменения в одно приложение или сайт, не мешая друг другу. blog.skillfactory.rukotazzz.github.iotimeweb.com
    • Объединение разных версий кода в один. Например, над проектом трудится несколько программистов, и каждый разрабатывает или изменяет код в собственных ветках. В конце работы ветки сливают вместе — и получается цельная программа. practicum.yandex.ru

8.
Объектно-ориентированное программирование (ООП) — это парадигма разработки программного обеспечения, согласно которой приложения состоят из объектов. Основная идея заключается в объединении данных и методов, работающих с этими данными, в единые структуры — объекты. skillbox.rusky.pro
Класс в ООП — это шаблон или чертёж для создания объектов. Он определяет набор свойств и методов, которые будут у объектов этого класса. Например, класс «Персонаж» может иметь свойства «здоровье» и «уровень», а также методы «атака» и «защита». sky.pro
Объект в ООП — это экземпляр класса, который содержит данные и методы для работы с этими данными. Объекты могут взаимодействовать друг с другом, вызывая методы и изменяя состояние друг друга. Например, в игре объектом может быть персонаж, который имеет свойства (здоровье, уровень) и методы (атака, защита)


9.
Git — это система контроля версий, которая помогает отслеживать историю изменений в файлах. Её используют программисты для совместной работы над проектами. blog.skillfactory.ru
Некоторые задачи, для решения которых применяется Git:
    • Возврат к предыдущей версии кода. Это нужно, если решаемая задача больше не актуальна или требуется внести исправления в более раннюю версию программы. blog.skillfactory.ru
    • Параллельная работа над проектом. Несколько программистов одновременно вносят изменения в одно приложение или сайт, не мешая друг другу. blog.skillfactory.rukotazzz.github.iotimeweb.com
    • Объединение разных версий кода в один. Например, над проектом трудится несколько программистов, и каждый разрабатывает или изменяет код в собственных ветках. В конце работы ветки сливают вместе — и получается цельная программа. practicum.yandex.ru


10.
Искусственный интеллект (ИИ) в простом понимании — это набор технологий, которые позволяют собирать и анализировать данные, автоматизировать процессы и принимать обоснованные решения. geeksforgeeks.org
Некоторые примеры использования ИИ в сельском хозяйстве:
    • Мониторинг сельскохозяйственных культур и управление ими. Беспилотные летательные аппараты и спутники с ИИ предоставляют данные о состоянии здоровья культур, росте и состоянии почвы в режиме реального времени.
    • Прогнозная аналитика. Алгоритмы ИИ обрабатывают исторические данные о погоде, состоянии почвы и урожайности для прогнозирования будущих тенденций. Например, модели могут предсказать оптимальные сроки посадки и сбора урожая, вероятные вспышки вредителей и ожидаемый урожай.
    • Автоматизированная техника. Автономные тракторы и комбайны, управляемые ИИ, выполняют такие задачи, как посадка, прополка и сбор урожая с высокой точностью, снижая трудозатраты и сводя к минимуму человеческие ошибки.
    • Мониторинг состояния почвы. Системы ИИ анализируют образцы почвы для определения уровней питательных веществ и других важных параметров.
    • Борьба с вредителями и болезнями. Инструменты распознавания изображений на базе ИИ обнаруживают ранние признаки нашествия вредителей и болезней растений.
    • Мониторинг здоровья животных. На тело животного устанавливаются специальные датчики, которые фиксируют температуру тела, сердечный ритм и активность. ИИ обрабатывает эти данные, что позволяет своевременно выявлять ранние признаки болезней и предотвращать их распространение.



11.

Переменная в программировании — это именованная область памяти, которая хранит данные, способные изменяться в процессе выполнения программы. informatics.rukedu.ru
У переменной есть имя (идентификатор), тип данных и значение. Имя позволяет обращаться к переменной в коде, а тип определяет, какие значения она может содержать. dzen.rukedu.ru
Типы переменных
Некоторые типы переменных:
    • Целые числа (Integer). Хранят числа без дробной части.
    • Числа с плавающей точкой (Float, Double). Представляют дробные значения.
    • Строки (String). Содержат последовательности символов: текст, слова, предложения.
    • Логические значения (Boolean). Имеют только два состояния: истина или ложь.
    • Списки и массивы (List, Array). Хранят упорядоченные наборы.
 el-ed.ruSkyeng.ru
Область видимости
Область видимости — это часть программы, в пределах которой переменная доступна для использования. netology.ruru.wikipedia.org*
Основные типы областей видимости:
    • Глобальная. Переменные объявлены на верхнем уровне, вне каких-либо конструкций, и доступны из любой части кода.
    • Локальная. Переменные объявлены внутри функции или блока кода и доступны только внутри этих конструкций.
    • Блочная. Переменные объявлены внутри блоков кода, например инструкций 
      if
      и циклов, и доступны только внутри этих блоков.
 netology.rujavarush.com
Примеры использования
Переменные используются для хранения данных, которые используются многократно. Например, в программе для расчёта стоимости заказа в интернет-магазине нужны переменные для хранения общей суммы, количества товаров и цены каждого товара. Pro-DGTL.ru
Также переменные позволяют создавать динамичные и адаптивные приложения, которые реагируют на действия пользователя и изменяющиеся условия в ходе выполнения программы. Например, в игровой разработке пользователь может накапливать очки, а значение переменной, отвечающей за количество очков, будет увеличиваться с каждым успешным действием. kedu.ru
Реализация переменных в разных языках
Объявление переменной — это оператор, который предоставляет имя переменной и её тип, позволяя программе выделять память для хранения значений. geeksforgeeks.org
Синтаксис объявления переменных может варьироваться в зависимости от конкретного языка программирования. Например, в JavaScript переменные объявляются с помощью слов 
let
, 
var
, 
const
, а в Python — можно просто присвоить переменной значение, предварительно указав её имя. 

12.

Массивы
Определение: упорядоченный набор элементов одного типа, хранящийся в памяти компьютера. dzen.runic.ru

В Python вместо классических массивов (array) обычно используют списки (list). Однако иногда возникает необходимость в настоящих массивах — например, для высокопроизводительных вычислений или при работе с числами. В таких случаях можно создавать массивы с помощью дополнительных инструментов: 

Особенности работы:
    • Создаются с помощью квадратных скобок, внутри которых перечисляются элементы через запятую. Например: 
      numbers = [1, 2, 3, 4]
      .
    • Обращение к элементам массива производится по индексу — порядковому номеру, начиная с 0. Для обращения к первому элементу — индекс 0, для второго — индекс 1, и так далее.
    • Поддерживают различные методы, позволяющие работать с элементами: например, метод 
      append()
      позволяет добавлять элементы в конец массива, а метод 
      remove()
      — удалять элементы из массива.

Списки
Определение: упорядоченный изменяемый набор объектов произвольных типов, пронумерованных от 0. timeweb.comsky.pro
Особенности работы:
    • Списки могут содержать элементы разных типов: строки, числа, другие списки и даже объекты.
    • У каждого элемента есть свой уникальный номер (индекс), по которому его можно найти.
    • В отличие от массивов, где всё должно быть одного размера, в Python ограничений по размеру нет.
    • Списки хранят не сами значения, а только ссылки на объекты: список состоит из адресов, которые указывают на место, где хранятся сами элементы.

13.

Отладка программы (debugging) — это процесс поиска, анализа и устранения ошибок (багов) в программном коде. Цель — найти и исправить ошибки, которые мешают программе работать корректно. 

Понятие
Отладка нужна, чтобы исправить недочёты, выявленные в ходе разработки, тестирования или эксплуатации. Ошибки могут проявляться в виде сбоев, некорректного выполнения функций или неправильного отображения данных. ru.hexlet.io
Этапы отладки:
    1. Обнаружение бага — ошибки, зафиксированной в ходе тестирования или найденной пользователем.
    2. Локализация ошибки — определение участка кода, который вызывает проблему.
    3. Исправление — может потребовать изменения логики программы, обработки данных или вызовов функций.
    4. Тестирование результата — позволяет убедиться, что исправление не привело к новым проблемам.
 ru.hexlet.io
Методы
Некоторые подходы к отладке:
    • Ручная отладка — разработчик самостоятельно анализирует код и его поведение. Например, чтение и анализ кода, код-ревью (взаимная проверка кода другими разработчиками). rating-gamedev.ru
    • Автоматизированная отладка — использование тестов для поиска ошибок в коде. Например, юнит-тесты — небольшие тесты, проверяющие отдельные компоненты кода (функции или методы) на правильность работы. rating-gamedev.ru
    • Метод обратного прослеживания — анализ последовательности событий, которые привели к ошибке. Разработчик идёт по цепочке выполнения программы в обратном порядке, начиная с момента ошибки, анализирует последние изменения или шаги программы, чтобы понять, где и когда возникло некорректное поведение. ru.hexlet.iopracticum.yandex.ru
Инструменты
Для отладки используют, например:
    • Отладчики (дебаггеры) — позволяют пошагово выполнять код, просматривать значения переменных, устанавливать точки останова и анализировать состояние программы в реальном времени. ru.hexlet.ioproductstar.ru
    • Интегрированные среды разработки (IDE) — объединяют в одном приложении все необходимые компоненты для программирования: текстовый редактор, компилятор или интерпретатор, средства отладки. practicum.yandex.ru
    • Системы логирования — библиотеки для записи сообщений о событиях в программе. productstar.ru
    • Линтеры и статические анализаторы — анализируют код без запуска и ищут потенциальные проблемы: синтаксические ошибки, нарушения стиля кода, неиспользуемые переменные. 

14.

IDE (от англ. Integrated Development Environment — «интегрированная среда разработки») — это программа, которая объединяет все необходимые инструменты для кодинга в одном месте. Здесь можно писать, проверять, тестировать и запускать код, не переключаясь между разными приложениями. dzen.rupracticum.yandex.ru
IDE включает в себя несколько инструментов: редактор кода, автодополнение и подсветку синтаксиса, дебаггер (отладчик), компилятор или интерпретатор, средства для тестирования, поддержку плагинов. dzen.russl-team.com
Функции
Некоторые функции IDE, которые предоставляют программисту:
    • Написание и просмотр кода — подсветка синтаксиса, автодополнение кода, что упрощает его написание и чтение.
    • Запуск и отладка кода — встроенные инструменты для отладки помогают тестировать и настраивать программы в реальном времени, моментально устраняя ошибки.
    • Рефакторинг — инструменты для улучшения структуры и качества кода без изменения внешнего поведения программы (переименование переменных, методов).
    • Компиляция и сборка проекта — IDE автоматически компилирует код в машинный код или байт-код, в зависимости от языка программирования, собирая проект в готовую к запуску программу.
    • Тестирование — встроенные средства для модульного и интеграционного тестирования помогают проверить, как код ведёт себя в различных условиях и правильно ли он работает.
    • Управление компонентами — IDE облегчают процесс поиска, установки и подключения внешних библиотек и плагинов.
    • Управление проектами — интегрированные среды разработки обеспечивают условия для запуска новых проектов и управления существующими, что упрощает координацию работы с множеством задач и файлов.
 q.diasoft.ru
Примеры
Некоторые примеры IDE:
    • PyCharm — для Python, предлагает инструменты для отладки, тестирования и рефакторинга кода, поддерживает интеграцию с различными фреймворками и библиотеками.
    • IntelliJ IDEA — для Java, предлагает интеллектуальное автодополнение, анализ кода и инструменты для отладки.
    • Visual Studio Code — легковесная и настраиваемая IDE от Microsoft, поддерживает множество расширений для разных языков программирования, включая отладчики и инструменты для работы с данными.
15.

API (Application Programming Interface) — это набор правил, по которым одни приложения могут общаться с другими: передавать данные, пользоваться функциями, получать нужные ответы. API выполняет роль посредника, позволяя приложениям обмениваться данными и функциями. journal.sweb.ruhelp.sweb.ruvc.ruhi-tech.mail.ru
API полезен при работе с внешними сервисами и биониформационными платформами, так как позволяет:
    • Интегрировать функционал других приложений или сервисов в собственные продукты. Например, приложение для бронирования авиабилетов может использовать API авиакомпаний, чтобы получать информацию о доступных рейсах, свободных местах и ценах. synergy.ru
    • Автоматизировать процессы и наладить обмен данными между разными платформами, убирая лишнюю ручную работу. journal.sweb.ru
    • Использовать готовые решения вместо создания кода с нуля, что ускоряет разработку. timeweb.cloudsynergy.ru
Принцип работы
API работает по принципу клиент-серверной архитектуры: одно приложение (клиент) отправляет запрос, а другое (сервер) обрабатывает его и возвращает ответ. Процесс работы API можно разделить на несколько этапов:
    1. Клиент отправляет запрос.
    2. API передаёт запрос серверу.
    3. Сервер обрабатывает запрос и отправляет ответ. После выполнения запроса сервер формирует ответ, например, возвращает запрашиваемые данные или подтверждает успешное выполнение операции.
    4. API передаёт данные обратно клиенту. Полученный от сервера ответ API возвращает клиенту в удобном формате, чаще всего в виде JSON или XML.
 help.sweb.ru

Виды
Некоторые виды API, которые используются для работы с внешними сервисами:
    • REST API — основан на протоколе HTTP, передаёт информацию в JSON- или XML-формате.
    • SOAP API — отличается строгими протоколами безопасности, использует XML-формат для обмена данными.
    • GraphQL API — позволяет клиентам запрашивать только нужные данные, снижает нагрузку на сервер.
 timeweb.cloudpracticum.yandex.ru
Применение
Примеры использования API при работе с внешними сервисами:
    • Системы бронирования билетов и агрегаторы цен — API авиакомпаний и транспортных операторов позволяет платформам получать актуальные данные о рейсах, тарифах и наличии мест.
    • Авторизация через социальные сети — сайты используют API Google, Facebook, «ВКонтакте» и других платформ для упрощённой регистрации пользователей.
    • Онлайн-оплата в интернет-магазинах — API платёжных сервисов (Stripe, «ЮMoney», Qiwi) позволяет интернет-магазинам принимать платежи без разработки собственной системы.

Безопасность
API регулирует доступ к данным и функциям, предотвращая несанкционированное использование. Например, платёжные транзакции выносятся в защищённые сервисы.

16.

Библиотека в программировании — это набор предопределённых функций, классов и инструментов, которые облегчают разработку программного обеспечения. Они представляют собой файлы с образцами кода, чтобы каждый раз не набирать его. blog.sf.education
Для анализа данных используются библиотеки, специально разработанные для работы с данными, их анализа и визуализации. Ниже приведены примеры таких библиотек для языков Python и R. blog.sf.education
Python
    • Pandas — библиотека для работы с табличными данными (CSV, Excel, SQL, JSON). Позволяет выполнять операции над данными: сортировку, группировку, агрегацию, слияние, соединение, разделение, заполнение пропусков, удаление дубликатов. blog.sf.educationElbrusboot.camp
    • NumPy — библиотека для углублённых расчётов, поддерживает большие массивы и матрицы. Содержит готовые методы для разных математических операций: от создания, изменения формы, умножения и расчёта детерминанта матриц до решения линейных уравнений и сингулярного разложения. practicum.yandex.ruanalyticsvidhya.comblog.skillfactory.ru
    • Scikit-learn — библиотека для машинного обучения и интеллектуального анализа данных: кластеризации, регрессии и классификации. Предоставляет алгоритмы для решения разных задач, а также инструменты для предобработки данных, выбора модели, оценки качества. blog.skillfactory.ruElbrusboot.camp
    • Statsmodels — библиотека для статистического анализа данных, предоставляет множество методов для разных задач: линейные и обобщённые линейные модели, анализ временных рядов, анализ выживаемости, анализ дисперсии, тестирование гипотез, оценка параметров. Elbrusboot.camp
R
    • tidyr — библиотека для очистки данных, помогает заполнить пропущенные значения в столбцах и сделать так, чтобы каждый столбец соответствовал только одной переменной. skillbox.ru
    • dplyr — пакет для обработки данных, предоставляет функции для фреймов данных, например, выделение подвыборок, сортировку, добавление строк, изменение столбцов, группировку и расчёт итогов. r-bloggers.comblog.sf.education
    • RandomForest — пакет с реализацией алгоритма случайного леса, используется для решения задач регрессии и классификации, а также для поиска аномалий и отбора предикторов. neerc.ifmo.ru

17.

Пользовательский интерфейс (UI) — это набор элементов и способов взаимодействия, которые позволяют пользователям взаимодействовать с программой или устройством. Основная цель UI — сделать это взаимодействие интуитивно понятным и удобным для пользователей. synergy.ruskil-web-dev.ru
UI включает в себя кнопки, меню, поля для ввода, формы и другие визуальные компоненты, которые помогают пользователям управлять программой и получать обратную связь от неё. Пример UI — экран смартфона, на котором расположены иконки приложений, кнопки навигации и уведомления. synergy.ru
Виды
Некоторые типы пользовательских интерфейсов:
    • Графический (GUI) — построен на визуальных элементах: окнах, иконках, кнопках, панелях инструментов, выпадающих меню. Примеры: операционные системы Windows и macOS, веб-браузеры, офисные программы.
    • Командный (CLI) — пользователь взаимодействует с программой через ввод текстовых команд. Пример: терминал в Linux или macOS, командная строка в Windows.
    • Голосовой (VUI) — использует голосовые команды для взаимодействия с программой или устройством. Пример: голосовые помощники Siri, Google Assistant, Alexa.
    • Жестовый — позволяет пользователю взаимодействовать с системой с помощью жестов и движений. Применяется в устройствах с сенсорным вводом и технологией распознавания движений.
 synergy.rubangbangeducation.ru
Примеры различных типов пользовательских интерфейсов: графический (GUI), командный (CLI), голосовой (VUI) и жестовый (GBI):







Принципы разработки
Удобство интерфейса важно при разработке программ, так как хороший дизайн UI помогает пользователю легко и быстро выполнить нужные действия, минимизируя ошибки. Некоторые принципы разработки:
    • Простота — ограничение количества цветов, шрифтов и элементов управления до минимума, необходимого для выполнения основных функций.
    • Консистентность — единообразие стилей элементов управления, типографики, цветовых схем и терминологии.
    • Интуитивность — пользователи могут легко понять, как взаимодействовать с интерфейсом, без длительного обучения.
    • Обратная связь — может включать анимации при касании, звуковые сигналы на выполнение действий или всплывающие подсказки и сообщения об ошибках.
 fortech.devvc.ru
Инструменты
Для создания пользовательских интерфейсов используются, например:
    • Figma — инструмент для прототипирования, позволяет создавать прототипы, создавать иконки, векторную графику и анимацию.
    • Sketch — позволяет создавать простые каркасы, интерактивные прототипы, векторные иллюстрации и иконки.

18


Облачные технологии — IT-технологии, которые позволяют хранить и обрабатывать информацию на удалённых серверах. Пользователь «арендует» вычислительные мощности и объёмы для хранения данных у поставщиков «облака». miit-project.github.iocyberleninka.ru
Облачные сервисы используются в разных сферах, включая аграрную и научную практику. xelent.rupracticum.yandex.ruprogkids.com
Аграрная практика
    • Мониторинг и прогнозирование урожайности. Облачные платформы собирают данные с полей, датчиков, дронов и анализируют их специальными программами. Например:
        ◦ Мониторинг влажности почвы — ферма в Краснодарском крае внедрила облачные системы, благодаря чему урожай пшеницы вырос на 18%, а расход воды сократился на 25%.
        ◦ Прогноз оптимального времени сева — фермеры в Липецкой области используют аналитические облачные сервисы, что позволило сэкономить химикаты на 15% и рост урожая кукурузы на 12%.
        ◦ Дистанционный контроль полива — фермер из Ростовской области снизил расход электроэнергии и воды на 28% благодаря интеграции системы дистанционного контроля полива на базе облака.
 school-science.rucadouri.online
Научная практика
    • Геномные исследования — исследователи Стэнфордского университета использовали AWS Open Data для ускорения исследований аутизма — они смогли обработать огромные объёмы геномных данных в облаке, что значительно сократило время анализа.
    • Экологический мониторинг — на базе AWS разработан инструмент для мониторинга засушливости лесов в западной части США, что позволяет оценивать динамику засушливости и прогнозировать риски лесных пожаров.
    • Медицинские исследования — команда Национального института рака США (NCI) совместно с исследователями из Массачусетского госпиталя создали биомедицинский информационный конвейер, используя облачные исследовательские экосистемы данных. Этот подход позволил провести анализ данных сотен тысяч пациентов за несколько месяцев, сократив время исследования с нескольких лет до нескольких месяцев.

19

Термин «open source» (открытый исходный код) означает, что исходный код программного обеспечения доступен для просмотра, изменения и распространения любым пользователем. Это альтернатива проприетарному программному обеспечению (закрытому исходному коду), где код защищён и доступен только разработчикам компании. mentoring.digitalru.wikipedia.org*polikarpov.legalblog.skillfactory.ru
Термин
Термин был предложен в 1998 году программистами Эриком Реймондом и Брюсом Перенсом как более корректный синоним термина «свободное ПО». blog.skillfactory.ruru.wikipedia.org*
Основные принципы Open Source:
    • Открытый доступ к исходному коду.
    • Свобода распространения — программу можно распространять бесплатно или за определённую плату.
    • Свобода модификации — пользователи имеют право создавать собственные версии программы на основе её исходного кода.
    • Сохранение целостности исходного кода автора — модифицированные версии программы также должны распространяться под Open Source лицензией.
 mentoring.digitalpolikarpov.legal
Инструменты
Некоторые примеры open source инструментов в области анализа данных:
    • R — язык программирования и среда разработки для статистического анализа и визуализации данных.
    • Weka — коллекция инструментов и алгоритмов для анализа данных и прогнозирования, поддерживает задачи data mining (классификация, кластеризация, визуализация данных).
    • Tangara — программный продукт для интеллектуального анализа данных, решает задачи визуализации, описательной статистики, факториального анализа.
    • Waffles — набор инструментов машинного обучения, анализа данных и визуализации, поддерживает многомерные метки графов, классификацию, регрессию.
    • Data Applied — онлайн-решение для интеллектуального анализа и визуализации данных, поддерживает корреляционный анализ, кластеризацию и прогнозирование временных рядов.
 datareview.infoosssoftware.org
Лицензии
Программы с открытым исходным кодом распространяются под определёнными лицензиями, которые регулируют, как именно можно использовать, модифицировать и распространять программное обеспечение. Например:
    • GPL (General Public License) — гарантирует свободу использования, распространения и модификации программного обеспечения, требует, чтобы производные работы также распространялись под лицензией GPL (принцип «копилефта»).
    • MIT (Massachusetts Institute of Technology License) — предоставляет пользователям широкие права на использование, модификацию и распространение программного обеспечения, не требует, чтобы производные работы распространялись под той же лицензией.

20.

IP-адрес (от англ. Internet Protocol) — уникальный числовой идентификатор устройства в компьютерной сети, работающей по протоколу IP. Он присваивается устройствам при подключении к интернету или локальной сети. ru.wikipedia.org*unisender.comRush-Analytics.ru
Зачем нужен IP-адрес: он позволяет устройствам находить друг друга и обмениваться информацией. Без уникального адреса устройства не могли бы находить друг друга и передавать данные. unisender.comedu.sravni.rusecuritylab.ru

Структура
IP-адрес состоит из чисел, разделённых точками (в версии IPv4) или двоеточиями (в версии IPv6). Например:
    • IPv4 — четыре десятичных числа от 0 до 255, разделённые точками (например, 192.168.1.1).
    • IPv6 — восемь групп по четыре шестнадцатеричных цифры, разделённые двоеточиями (например, 2001:0db8:85a3:0000:0000:8a2e:0370:7334).
 ittelo.ruru.wikipedia.org*
Функции
    • Идентификация устройства — IP-адрес позволяет другим устройствам находить и взаимодействовать с ним.
    • Маршрутизация данных — данные в сети передаются не напрямую от отправителя к получателю, а проходят через множество промежуточных узлов — маршрутизаторов. Эти узлы направляют информацию к конечному пункту по наиболее эффективному маршруту на основе IP-адресов, ориентируясь на изменения сетевой инфраструктуры (например, учитывают добавление новых устройств, отказы сети).
    • Использование для различных целей: доступ к веб-сайтам, отправка электронной почты, обмен файлами.
 securitylab.ruunisender.com
Виды
IP-адреса можно классифицировать по разным критериям, например:
    • По доступности — публичные (видимые из интернета) и частные (используемые внутри локальных сетей).
    • По методу назначения — статические (остаются постоянными) и динамические (изменяются со временем).
 Rush-Analytics.ruedu.sravni.ru
Безопасность
IP-адрес помогает обеспечить информационную безопасность в сети. С его помощью системные администраторы могут устанавливать права доступа — например, разрешать или запрещать устройствам выход в интернет или на какие-то конкретные сайты. sky.prounisender.com
Однако раскрытие IP-адреса может привести к угрозам безопасности, например, к DDoS-атакам (распределённым атакам типа «отказ в обслуживании»). securitylab.ru

21.

Прикладное программное обеспечение (ППО) — это набор программ, предназначенных для выполнения конкретных задач пользователей на компьютерах и других цифровых устройствах. Work5.ru
Некоторые примеры отраслей прикладного ПО, используемых в науке, образовании или аграрной отрасли:
    • Научное и инженерное ПО. Математическое моделирование, симуляция систем, инженерные расчёты, сбор и анализ информации. Примеры программ: MATLAB, ANSYS, LabVIEW.
    • Медицинское ПО. Хранение и управление данными, диагностика и визуализация, помощь в принятии клинических решений. Примеры программ: PACS (Picture Archiving and Communication Systems), электронные медицинские карты (EMR).
    • Промышленное и производственное ПО. Управление производственными процессами, автоматизация и контроль, проектирование и производство деталей и узлов. Примеры программ: SCADA (Supervisory Control and Data Acquisition), MES (Manufacturing Execution Systems), CAD/CAM системы.
    • Образовательное ПО. Поддержка учебного процесса, дистанционное обучение, симуляция и моделирование образовательных процессов. Примеры программ: системы дистанционного обучения (LMS), интерактивные учебные программы, виртуальные лаборатории.
    • Географические информационные системы (ГИС). Картографирование и анализ пространственных данных, управление геоданными, визуализация и моделирование географической информации. Примеры программ: ArcGIS, QGIS, Google Earth Pro.

22.

Особенности использования языка программирования R для статистических расчётов в биоинформатике:
    • Гибкость и расширяемость. R позволяет пользователям писать собственные сценарии и функции, адаптированные к конкретным исследовательским вопросам.
    • Возможность интеграции с другими инструментами и базами данных. Это обеспечивает плавную передачу данных между различными платформами и оптимизирует аналитические рабочие процессы.
    • Доступ к широкому спектру статистических методов и алгоритмов. Обширная экосистема пакетов R гарантирует пользователям доступ к методам и алгоритмам, разработанным сообществом биоинформатики.
 fastercapital.com
Некоторые примеры пакетов R, полезных в анализе данных в биоинформатике:
    • Biostrings. Пакет для эффективного манипулирования и анализа биологических последовательностей, включая ДНК, РНК и белковые последовательности.
    • limma, edgeR и DESeq2. Пакеты для анализа экспрессии генов, которые облегчают предварительную обработку, нормализацию, анализ дифференциальной экспрессии и функционального обогащения данных об экспрессии генов.
    • Bio3D и PDB. Пакеты для анализа и прогнозирования структуры белка. Предоставляют функции для извлечения данных о структуре белка, выполнения структурных выравниваний, прогнозирования межбелковых взаимодействий и визуализации структур белка.

23.

Big Data — это огромные массивы данных, которые собираются с различных источников и требуют специальной обработки и анализа. gvozdika18.ru
Примеры возникновения Big Data в животноводстве:
    • Датчики мониторинга здоровья животных. Это могут быть ошейники с GPS-трекерами, датчики температуры тела, пульса, уровня активности и других физиологических показателей. Такие данные позволяют оперативно выявлять отклонения от нормы, предупреждать заболевания и оптимизировать рацион питания.
    • Системы контроля кормления. Автоматизированные кормушки и системы взвешивания позволяют отслеживать потребление корма каждым животным, что в сочетании с данными о продуктивности позволяет оптимизировать рацион и повышать эффективность кормления.
    • Системы доения. Автоматизированные системы доения собирают данные о количестве молока, его составе (жирность, белок, содержание соматических клеток) и времени доения для каждого животного.
    • Данные о репродукции. Информация о циклах, осеменениях, беременностях и родах является критически важной для управления стадом и повышения воспроизводства.
    • Данные о климате и окружающей среде. Температура, влажность, освещённость и другие параметры микроклимата в животноводческих помещениях оказывают значительное влияние на здоровье и продуктивность животных.
    • Данные с генетических исследований. Геномное тестирование животных позволяет получить информацию о генетической предрасположенности к различным заболеваниям и продуктивным признакам.
    • Данные о ветеринарном обслуживании. История болезней, вакцинации и лечения каждого животного является важной информацией для предотвращения распространения заболеваний и оптимизации ветеринарного обслуживания.
 gvozdika18.ru
Некоторые вызовы, связанные с обработкой Big Data в животноводстве:
    • Большие объёмы данных. Требуются специальные инструменты и навыки для обработки и анализа.
    • Разнородность данных. Данные могут поступать из разных источников и иметь разные форматы, что затрудняет их интеграцию.
    • Необходимость в квалифицированных специалистах. Требуются специалисты по анализу данных, машинному обучению и животноводству.
    • Конфиденциальность данных. Необходимо обеспечить защиту данных о животных и владельцах.
    • Высокая стоимость внедрения. Требуются значительные инвестиции в оборудование, программное обеспечение и обучение персонала.

24.

Для защиты персональных данных при работе с цифровыми базами в аграрных и биологических исследованиях можно применять следующие меры информационной безопасности:
    • Шифрование данных. Необходимо шифровать информацию как при хранении на устройствах или серверах, так и при передаче по сетям. Для защиты при передаче можно использовать протоколы шифрования, такие как Secure Sockets Layer (SSL) и Transport Layer Security (TLS).
    • Контроль доступа. Следует использовать системы управления доступом на основе ролей (RBAC), которые назначают пользователям определённые разрешения и привилегии в зависимости от их ролей в рамках исследовательского проекта.
    • Регулярные проверки безопасности. Необходимо проводить регулярные проверки безопасности и оценки инфраструктуры данных для выявления уязвимостей, потенциальных угроз и слабых мест в безопасности данных.
    • Резервное копирование данных. Регулярное резервное копирование данных исследований, как на месте, так и за его пределами, гарантирует возможность восстановления данных в случае случайного удаления, сбоя оборудования или кибератак.
    • Обучение сотрудников. Сотрудников нужно обучать основам кибербезопасности, чтобы они могли распознавать явные признаки вредоносных писем.
    • Сегментация сети. Технологические сети нужно отделять от локальных бизнес-сетей и дробить их на более мелкие части.
    • Использование антивирусного ПО. Антивирусное ПО нужно устанавливать на всех устройствах в сети, чтобы блокировать вредоносное ПО.
    • Регулярное исправление и обновление ПО. При выявлении уязвимостей в компьютерных системах и ПО вендоры регулярно дорабатывают их и обновляют системы для защиты своих клиентов.

25.

Data Science — область науки, занимающаяся анализом данных. blog.skillfactory.rugb.ru
Она находится на стыке математики, статистики, программирования. Data Science позволяет решать сложные задачи в бизнесе, науке, медицине и финансах, находя закономерности в больших объёмах информации и превращая их в полезные инсайты. 
